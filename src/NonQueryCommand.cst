<%@ CodeTemplate Language="C#" TargetLanguage="C#" CompilerVersion="v3.5" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Src="Common.cs" %>
<%@ Import Namespace="CodeSmith.Engine" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Data" %>
<%@ Map Name="DbTypeToCSharp" Src="Maps\DbType-CSharp.csmap" %>
<%@ Map Name="DbTypeToDataHandler" Src="Maps\DbType-DataHandler.csmap" %>
<%@ Property Name="DbCommand" Type="SchemaExplorer.CommandSchema" %>
<%@ Property Name="CommandName" Type="System.String" %>
<%@ XmlProperty Name="DataLayerXml" Schema="Commands.xsd" Optional="True" %>
<script runat="template">
	public _CodeSmith.Command XmlCommand { get; set; }

	private class CommandParameter : _CodeSmith.Parameter
	{
		public DbType DbType;
		public int Size;
		public ParameterDirection Direction;

		public bool IsInputParameter
		{
			get { return this.Direction == ParameterDirection.Input; }
		}
	}	
</script>
<%
	//write non query command code
	var parameters = new List<CommandParameter>();
	
	/*foreach (var dbParameter in DbCommand.Parameters) {
		Response.WriteLine(dbParameter.Name + " " + dbParameter.Direction.ToString() + " " + dbParameter.DataType.ToString());
	}
		
	if (DbCommand.ReturnValueParameter != null)
		Response.WriteLine(DbCommand.ReturnValueParameter.Name + " " + DbCommand.ReturnValueParameter.Direction.ToString() + " " + DbCommand.ReturnValueParameter.DataType.ToString());*/

	//combine schema parameter properties with xml parameter properties
	if (XmlCommand.Parameters != null && XmlCommand.Parameters.Any()) {
		foreach (var dbParameter in DbCommand.NonReturnValueParameters) {
			var xmlParameter = XmlCommand.Parameters.SingleOrDefault(p => p.Name == dbParameter.Name);
			
			if (xmlParameter == null) {
				parameters.Add(new CommandParameter {
					Name = dbParameter.Name,
					DbType = dbParameter.DataType,
					Direction = dbParameter.Direction,
					Size = dbParameter.Size
				});
			}
			else {
				if (!xmlParameter.Exclude) {
					parameters.Add(new CommandParameter {
						Name = dbParameter.Name,
						DbType = dbParameter.DataType,
						Direction = dbParameter.Direction,
						Nullable = xmlParameter.Nullable,
						Size = dbParameter.Size,
						HardCodedValue = xmlParameter.HardCodedValue
					});
				}
			}
		}
	}
	else {
		foreach (var dbParameter in DbCommand.NonReturnValueParameters) {
			parameters.Add(new CommandParameter {
				Name = dbParameter.Name,
				DbType = dbParameter.DataType,
				Direction = dbParameter.Direction,
				Size = dbParameter.Size
			});
		}
	}
	
	//parameter definition for methods and method callers
	var methodParameters = new List<string>();
	var methodParametersToSend = new List<string>();
	
	foreach (var parameter in parameters) {
		if (parameter.IsInputParameter && parameter.HardCodedValue == null) {
			if (parameter.Nullable)
				methodParameters.Add(string.Format("{0}? {1}", DbTypeToCSharp[parameter.DbType.ToString()], StringUtil.ToCamelCase(parameter.Name.Replace("@", string.Empty))));
			else
				methodParameters.Add(string.Format("{0} {1}", DbTypeToCSharp[parameter.DbType.ToString()], StringUtil.ToCamelCase(parameter.Name.Replace("@", string.Empty))));
				
			methodParametersToSend.Add(StringUtil.ToCamelCase(parameter.Name.Replace("@", string.Empty)));
		}
	}
	
	var joinedMethodParameters = string.Join(", ", methodParameters.ToArray());
	var joinedMethodParametersToSend = string.Join(", ", methodParametersToSend.ToArray());
%>

/// <summary>
/// executes the <%=DbCommand.Name%> procedure
/// </summary>
<%
	foreach (var parameter in parameters) {
		if (parameter.IsInputParameter && parameter.HardCodedValue == null) {
%>
/// <param name="<%=StringUtil.ToCamelCase(parameter.Name.Replace("@", string.Empty))%>">mapped to <%=parameter.Name%> input parameter</param>
<%
		}
	}
%>
public <%=CommandName%>Result <%=CommandName%>(<%=joinedMethodParameters%>)
{
	var result = new <%=CommandName%>Result();
	
	var retry = false;
	var attempts = 0;
	const int maxAttempts = <%=XmlCommand.MaxAttempts%>;
	
	do {
		attempts++;
			
		using (var command = Get<%=CommandName%>Command(<%=joinedMethodParametersToSend%>)) {
			if (Connection.State == ConnectionState.Closed)
				Connection.Open();
				
		    try {
			    result.RecordsAffected = command.ExecuteNonQuery();
<%
    if (parameters.Any(p => !p.IsInputParameter)) {
%>
            
<%
        foreach (var parameter in parameters) {
            if (!parameter.IsInputParameter) {
                if (!DbTypeToDataHandler.ContainsKey(parameter.DbType.ToString()))
                    throw new Exception("Add " + parameter.DbType.ToString() + " to DbTypeToDataHandler");
                    
                if (!Common.IsValueType(DbTypeToCSharp[parameter.DbType.ToString()]) || parameter.Nullable) {
%>
			    result.<%=parameter.Name.Replace("@", string.Empty)%> = <%=DbTypeToDataHandler[parameter.DbType.ToString()]%>FromParam(command, "<%=parameter.Name%>");
<%
                }
                else {
%>
			    result.<%=parameter.Name.Replace("@", string.Empty)%> = <%=DbTypeToDataHandler[parameter.DbType.ToString()]%>FromParam(command, "<%=parameter.Name%>").Value;
<%
                }
            }
        }
	}
%>

				retry = false;
			}
            catch (System.Data.SqlClient.SqlException exSql) {
                switch (exSql.Number) {
					case ConnectionRefused:
						retry = attempts < maxAttempts;
						
						if (!retry)
							ThrowDatabaseException(exSql, command);

						break;
					default:
						ThrowDatabaseException(exSql, command);
						break;
                }
		    }
		    catch (Exception ex) {
			    ThrowDatabaseException(ex, command);
		    }
        }
	} while (retry);
	
	return result;
}

private DbCommand Get<%=CommandName%>Command(<%=joinedMethodParameters%>)
{
	var command = CreateStoredProcCommand("<%=DbCommand.Name%>");
<%
	int commandTimeout;
	if (!string.IsNullOrEmpty(XmlCommand.CommandTimeout) && int.TryParse(XmlCommand.CommandTimeout, out commandTimeout)) {
%>
	command.CommandTimeout = <%=commandTimeout%>;
<%
	}
%>
<%
	if (parameters.Any()) {
%>
	DbParameter[] paramList;
	
	if (ParameterCache.IsParameterSetCached(DB_KEY, "<%=CommandName%>")) {
		paramList = ParameterCache.GetCachedParameterSet(DB_KEY, "<%=CommandName%>");

<%
		for (var i = 0; i < parameters.Count; i++) {
			var parameter = parameters[i];
            
            if (parameter.HardCodedValue != null)
                continue;
			
			if (parameter.IsInputParameter) {
%>
		paramList[<%=i%>].Value = PrepParameterValue(DbType.<%=parameter.DbType.ToString()%>, <%=StringUtil.ToCamelCase(parameter.Name.Replace("@", string.Empty))%>);
<%
			}
			else {
%>
		paramList[<%=i%>].Value = null;
<%
			}
		}
%>
	}
	else {
		paramList = new[] {
<%
		for (var i = 0; i < parameters.Count; i++) {
			var parameter = parameters[i];

			if (parameter.IsInputParameter) {
				if (Common.RequiresSize(parameter.DbType)) {
					if (parameter.HardCodedValue == null) {
%>
			CreateInParameter("<%=parameter.Name%>", DbType.<%=parameter.DbType.ToString()%>, <%=StringUtil.ToCamelCase(parameter.Name.Replace("@", string.Empty))%>, <%=parameter.Size%>)<%=(i < parameters.Count - 1) ? "," : string.Empty%>
<%
					}
					else {
%>
			CreateInParameter("<%=parameter.Name%>", DbType.<%=parameter.DbType.ToString()%>, "<%=parameter.HardCodedValue%>", <%=parameter.Size%>)<%=(i < parameters.Count - 1) ? "," : string.Empty%>
<%
					}
				}
				else {
					if (parameter.HardCodedValue == null) {
%>
			CreateInParameter("<%=parameter.Name%>", DbType.<%=parameter.DbType.ToString()%>, <%=StringUtil.ToCamelCase(parameter.Name.Replace("@", string.Empty))%>)<%=(i < parameters.Count - 1) ? "," : string.Empty%>
<%
					}
					else {
%>
			CreateInParameter("<%=parameter.Name%>", DbType.<%=parameter.DbType.ToString()%>, <%=parameter.HardCodedValue%>)<%=(i < parameters.Count - 1) ? "," : string.Empty%>
<%
					}
				}
			}
			else {
				if (Common.RequiresSize(parameter.DbType)) {
%>
			CreateOutParameter("<%=parameter.Name%>", DbType.<%=parameter.DbType.ToString()%>, <%=parameter.Size%>)<%=(i < parameters.Count - 1) ? "," : string.Empty%>
<%
					}
					else {
%>
			CreateOutParameter("<%=parameter.Name%>", DbType.<%=parameter.DbType.ToString()%>)<%=(i < parameters.Count - 1) ? "," : string.Empty%>
<%
				}
			}
		}
%>
		};

		ParameterCache.AddParameterSetToCache(DB_KEY, "<%=CommandName%>", paramList);
	}
	
	command.Parameters.AddRange(paramList);
	
<%
	}
%>
	return command;
}
