<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="BaseTemplate" CompilerVersion="v3.5" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Src="BaseTemplate.cs" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Map Name="DbTypeCSharp" Src="Maps\DbType-CSharp.csmap" %>
<%@ Register Name="QueryCommandTemplate" Template="QueryCommand.cst" %>
<%@ Register Name="ResultClassTemplate" Template="ResultClass.cst" %>
<%@ Register Name="ResultRowClassTemplate" Template="ResultRowClass.cst" %>
<%@ Register Name="NonQueryCommandTemplate" Template="NonQueryCommand.cst" %>
<%@ Register Name="ScalarFunctionCommandTemplate" Template="ScalarFunctionCommand.cst" %>
<%@ Register Name="CustomQueryCommandTemplate" Template="CustomQueryCommand.cst" %>
<%@ Register Name="CustomNonQueryCommandTemplate" Template="CustomNonQueryCommand.cst" %>
<%@ Register Name="DataSetCommandTemplate" Template="DataSetCommand.cst" %>
<%@ Register Name="TableQueryCommandTemplate" Template="TableQueryCommand.cst" %>
<%@ Property Name="Source" Type="SchemaExplorer.DatabaseSchema" Optional="True" %>
<%@ Property Name="ParentFile" Type="System.String" Optional="True" %>
<%@ XmlProperty Name="DataLayerXml" Schema="Commands.xsd" Optional="True" %>
<script runat="template">
    public override void Render(TextWriter writer)
	{
        Trace.WriteLine("Inside of CommandGroup.cst");
        base.Render(writer);
    }

    public _CodeSmith.CommandGroup XmlCommandGroup { get; set; }
	public _CodeSmith.CommandResultCollection XmlSharedResults { get; set; }
</script>
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;

<%
	BeginNamespace();
%>
public partial class <%=XmlCommandGroup.DatabaseName%>Database : Database, I<%=XmlCommandGroup.DatabaseName%>Database
{
	private const string DB_KEY = "<%=XmlCommandGroup.DatabaseName%>";
	
	internal <%=XmlCommandGroup.DatabaseName%>Database(string connectionString, DbProviderFactory dbProviderFactory)
		: base(connectionString, dbProviderFactory) { }
<%
	Response.Indent();
	
	foreach (var xmlCommand in XmlCommandGroup.Commands) {
        Trace.WriteLine(String.Format("\t\t{0}", xmlCommand.Name));
        Trace.WriteLineIf(Source == null, "\t\t\t\tsource is null");
		var dbCommand = Source != null ? Source.Commands[xmlCommand.Name] : null;
		var commandName = xmlCommand.NameOverride;
		
		if (dbCommand != null) {
			if (string.IsNullOrEmpty(commandName)) {
				if (xmlCommand.Name.StartsWith("up") || xmlCommand.Name.StartsWith("uf"))
					commandName = xmlCommand.Name.Remove(0, 2);
				else
					commandName = xmlCommand.Name;
			}
%>

#region -- <%=commandName%> --
<%
			var commandResults = xmlCommand.CommandResults;
			var renderResultClass = false;
		
			//command
			if (xmlCommand.ResultType == _CodeSmith.ResultType.NonQuery) {
                var commandTemplate = this.Create<NonQueryCommandTemplate>();
				commandTemplate.DbCommand = dbCommand;
				commandTemplate.XmlCommand = xmlCommand;
				commandTemplate.CommandName = commandName;
				
				commandTemplate.Render(Response);
				
				renderResultClass = true;
			}
			else if (xmlCommand.ResultType == _CodeSmith.ResultType.ScalarFunction) {
                var commandTemplate = this.Create<ScalarFunctionCommandTemplate>();
				commandTemplate.DbCommand = dbCommand;
				commandTemplate.XmlCommand = xmlCommand;
				commandTemplate.CommandName = commandName;
				
				commandTemplate.Render(Response);
			}
			else if (xmlCommand.ResultType == _CodeSmith.ResultType.DataSet) {
                var commandTemplate = this.Create<DataSetCommandTemplate>();
				commandTemplate.DbCommand = dbCommand;
				commandTemplate.XmlCommand = xmlCommand;
				commandTemplate.CommandName = commandName;
				
				commandTemplate.Render(Response);
			}
			else {
                //convert autogenerated data to xml data
                if (xmlCommand.AutoGenerateResults) {
					//no result defined in xml, create new one
					if (commandResults == null || !commandResults.Any()) {
						commandResults = new _CodeSmith.CommandResultCollection();
						
						foreach (var dbResult in dbCommand.CommandResults) {
							var commandResult = new _CodeSmith.CommandResult {
								Columns = new _CodeSmith.ResultColumnCollection()
							};
							
							foreach (var dbColumn in dbResult.Columns) {
								_CodeSmith.DataType dataType;
								
								if (dbColumn.DataType == DbType.Binary)
									dataType = _CodeSmith.DataType.binary;
								else
									dataType = (_CodeSmith.DataType)Enum.Parse(typeof(_CodeSmith.DataType), DbTypeCSharp[dbColumn.DataType.ToString()]);
								
								commandResult.Columns.Add(new _CodeSmith.ResultColumn {
									Name = dbColumn.Name,
									DataType = dataType
								});
							}
							
							commandResults.Add(commandResult);
						}
					}
					else if (dbCommand.CommandResults.Count == commandResults.Count) {
						//fill in gaps of xml result with db results
						for (var i = 0; i < dbCommand.CommandResults.Count; i++) {
							var dbResult = dbCommand.CommandResults[i];
							var oldCommandResult = commandResults[i];
							var sharedResult = XmlSharedResults.SingleOrDefault(result => result.Name == oldCommandResult.Name);
							if (sharedResult != null) {
								oldCommandResult.Columns = sharedResult.Columns;
							}
							
							var newCommandResult = new _CodeSmith.CommandResult {
								Name = oldCommandResult.Name,
								Columns = new _CodeSmith.ResultColumnCollection()
							};
							
							foreach (var dbColumn in dbResult.Columns) {
								_CodeSmith.DataType dataType;
								
								if (dbColumn.DataType == DbType.Binary)
									dataType = _CodeSmith.DataType.binary;
								else
									dataType = (_CodeSmith.DataType)Enum.Parse(typeof(_CodeSmith.DataType), DbTypeCSharp[dbColumn.DataType.ToString()]);
	
								var newColumn = new _CodeSmith.ResultColumn {
									Name = dbColumn.Name,
									DataType = dataType
								};
								
								var oldColumn = oldCommandResult.Columns.SingleOrDefault(c => c.Name == dbColumn.Name);
								if (oldColumn != null)
									newColumn.Nullable = oldColumn.Nullable;

								newCommandResult.Columns.Add(newColumn);
							}
							
							commandResults[i] = newCommandResult;
						}
					}
                }

				for (int i = 0; i < commandResults.Count; i++) {
					var commandResult = commandResults[i];
					
					if (!xmlCommand.AutoGenerateResults) {
						var sharedResult = XmlSharedResults.SingleOrDefault(result => result.Name == commandResult.Name);
	
						if ((xmlCommand.ResultType == _CodeSmith.ResultType.Query || xmlCommand.ResultType == _CodeSmith.ResultType.SingleRecord) && sharedResult != null) {
							commandResult.Columns = sharedResult.Columns;
						}
					}
					/*else if (xmlCommand.ResultType == _CodeSmith.ResultType.Query) {
						var isSingleSet = (i == 0 && i == commandResults.Count - 1);
						var rowName = commandName + "ResultRow";

						if (!string.IsNullOrEmpty(commandResult.Name))
							rowName = commandResult.Name;
						else if (!isSingleSet)
							rowName +=  (i + 1).ToString();

						var resultRowClassTemplate = this.Create<ResultRowClassTemplate>();
						resultRowClassTemplate.Namespace = Namespace;
						resultRowClassTemplate.RowName = rowName;
						resultRowClassTemplate.CommandResult = commandResult;

						if (string.IsNullOrEmpty(ParentFile)) {
							resultRowClassTemplate.Render(Response);
						}
						else {
							var outputFile = new OutputFile(rowName + ".cs", ParentFile);
							resultRowClassTemplate.RenderToFile(outputFile, true);
						}
					}*/
				}
				
				renderResultClass = true;

				var commandTemplate = this.Create<QueryCommandTemplate>();
				commandTemplate.DbCommand = dbCommand;
				commandTemplate.XmlCommand = xmlCommand;
				commandTemplate.CommandName = commandName;
				commandTemplate.CommandResults = commandResults;
				commandTemplate.XmlSharedResults = XmlSharedResults;
					
				commandTemplate.Render(Response);
			}

			if (renderResultClass) {
				//result class
				var resultClassTemplate = this.Create<ResultClassTemplate>();
				resultClassTemplate.Namespace = Namespace;
				resultClassTemplate.DbCommand = dbCommand;
				resultClassTemplate.XmlCommand = xmlCommand;
				resultClassTemplate.CommandName = commandName;
				resultClassTemplate.CommandResults = commandResults;
	
				if (string.IsNullOrEmpty(ParentFile)) {
					resultClassTemplate.Render(Response);
				}
				else {
					var outputFile = new OutputFile(commandName + "Result.cs", ParentFile);
					resultClassTemplate.RenderToFile(outputFile, true);
				}
			}
%>

#endregion
<%
		}
		else if (!string.IsNullOrEmpty(xmlCommand.CommandText)) {
            Trace.WriteLine(String.Format("\t\t{0}", "else if xmlCommand.CommandText is null or empty"));
%>

#region -- <%=xmlCommand.Name%> --
<%
			//custom sql command
			if (xmlCommand.ResultType == _CodeSmith.ResultType.NonQuery) {
				var commandTemplate = this.Create<CustomNonQueryCommandTemplate>();
				commandTemplate.XmlCommand = xmlCommand;
				
				commandTemplate.Render(Response);
			}
			else {
				//row records
				for (int i = 0; i < xmlCommand.CommandResults.Count; i++) {
					var commandResult = xmlCommand.CommandResults[i];
					var sharedResult = XmlSharedResults.SingleOrDefault(result => result.Name == commandResult.Name);

					if ((xmlCommand.ResultType == _CodeSmith.ResultType.Query || xmlCommand.ResultType == _CodeSmith.ResultType.SingleRecord) && sharedResult != null) {
						xmlCommand.CommandResults[i].Columns = sharedResult.Columns;
					}
					/*else if (xmlCommand.ResultType == _CodeSmith.ResultType.Query) {
						var isSingleSet = (i == 0 && i == xmlCommand.CommandResults.Count - 1);
						var rowName = commandName + "ResultRow";

						if (!string.IsNullOrEmpty(commandResult.Name))
							rowName = commandResult.Name;
						else if (!isSingleSet)
							rowName +=  (i + 1).ToString();

						var resultRowClassTemplate = this.Create<ResultRowClassTemplate>();
						resultRowClassTemplate.Namespace = Namespace;
						resultRowClassTemplate.RowName = rowName;
						resultRowClassTemplate.CommandResult = commandResult;

						if (string.IsNullOrEmpty(ParentFile)) {
							resultRowClassTemplate.Render(Response);
						}
						else {
							var outputFile = new OutputFile(rowName + ".cs", ParentFile);
							resultRowClassTemplate.RenderToFile(outputFile, true);
						}
					}*/
				}

				//result class
				var resultClassTemplate = this.Create<ResultClassTemplate>();
				resultClassTemplate.Namespace = Namespace;
				resultClassTemplate.DbCommand = null;
				resultClassTemplate.XmlCommand = xmlCommand;
				resultClassTemplate.CommandName = xmlCommand.Name;
				resultClassTemplate.CommandResults = xmlCommand.CommandResults;
	
				if (string.IsNullOrEmpty(ParentFile)) {
					resultClassTemplate.Render(Response);
				}
				else {
					var outputFile = new OutputFile(xmlCommand.Name + "Result.cs", ParentFile);
					resultClassTemplate.RenderToFile(outputFile, true);
				}

				var commandTemplate = this.Create<CustomQueryCommandTemplate>();
				commandTemplate.XmlCommand = xmlCommand;
				commandTemplate.XmlSharedResults = XmlSharedResults;
				
				commandTemplate.Render(Response);
			}
%>

#endregion
<%
		}
        else if (xmlCommand.ResultType == _CodeSmith.ResultType.Table) {
%>

#region -- table [<%=xmlCommand.Name%>] --
<%
			var table = Source.Tables[xmlCommand.Name];
			
			xmlCommand.CommandResults = new _CodeSmith.CommandResultCollection();
			xmlCommand.CommandResults.Add(new _CodeSmith.CommandResult { Columns = new _CodeSmith.ResultColumnCollection() });
			
			foreach (var tableColumn in table.Columns) {
				var resultColumn = new _CodeSmith.ResultColumn {
					Name = tableColumn.Name,
					Nullable = tableColumn.AllowDBNull
				};
				
				if (tableColumn.DataType == DbType.Binary)
					resultColumn.DataType = _CodeSmith.DataType.binary;
				else
					resultColumn.DataType = (_CodeSmith.DataType)Enum.Parse(typeof(_CodeSmith.DataType), DbTypeCSharp[tableColumn.DataType.ToString()]);

				xmlCommand.CommandResults[0].Columns.Add(resultColumn);
			}

			var tableName = table.Name.StartsWith("tb") ? table.Name.Remove(0, 2) : table.Name;
			var tableCommandName = "Get" + StringUtil.ToPlural(tableName);
			
			var resultClassTemplate = this.Create<ResultClassTemplate>();
			resultClassTemplate.Namespace = Namespace;
			resultClassTemplate.DbCommand = null;
			resultClassTemplate.XmlCommand = xmlCommand;
			resultClassTemplate.CommandName = tableCommandName;
			resultClassTemplate.CommandResults = xmlCommand.CommandResults;
	
			if (string.IsNullOrEmpty(ParentFile)) {
				resultClassTemplate.Render(Response);
			}
			else {
				var outputFile = new OutputFile(tableCommandName + "Result.cs", ParentFile);
				resultClassTemplate.RenderToFile(outputFile, true);
			}

			var commandTemplate = this.Create<TableQueryCommandTemplate>();
			commandTemplate.XmlCommand = xmlCommand;
			commandTemplate.Table = table;
			commandTemplate.CommandName = tableCommandName;
			commandTemplate.CommandResult = xmlCommand.CommandResults[0];
				
			commandTemplate.Render(Response);

%>

#endregion
<%
		}
        else {
            
            Trace.WriteLine(String.Format("\t\t{0}", "The stored procedure name defined does not match the list of procs on the server"));
            throw new Exception(string.Format("The stored procedure name \"{0}\" was not found.  Could be a permission error or a typo", xmlCommand.Name));
        }
	}
	
	Response.Unindent();
%>
}
<%
	EndNamespace();
%>
